import xml.etree.ElementTree as ET
import os

def load_custom_dict(xml_path):
    import os
    import xml.etree.ElementTree as ET

    if not os.path.exists(xml_path):
        print(f"‚ùå –§–∞–π–ª {xml_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}

    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()
        result = {}

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ ESP, —Ç–∞–∫ –∏ BDD
        for entry in root.findall(".//BDD") + root.findall(".//ESP"):
            orig = entry.findtext("ORIGINAL")
            trans = entry.findtext("TRADUIT")
            if orig and trans:
                result[orig.strip()] = trans.strip()

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {xml_path}")
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞—Ä—è: {e}")
        return {}

def append_to_auto_dict(xml_path, original, translated):
    if not os.path.exists(xml_path):
        root = ET.Element("DocumentElement")
        tree = ET.ElementTree(root)
        tree.write(xml_path, encoding="utf-8", xml_declaration=True)

    tree = ET.parse(xml_path)
    root = tree.getroot()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    for entry in root.findall("BDD"):
        if (entry.findtext("ORIGINAL") or "").strip() == original.strip():
            return  # –£–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º

    bdd = ET.SubElement(root, "BDD")
    ET.SubElement(bdd, "GRUP").text = "AUTO"
    ET.SubElement(bdd, "ID").text = "00000000"
    ET.SubElement(bdd, "EDID").text = ""
    ET.SubElement(bdd, "CHAMP").text = "FULL"
    ET.SubElement(bdd, "ORIGINAL").text = original
    ET.SubElement(bdd, "TRADUIT").text = translated
    ET.SubElement(bdd, "PERSO")
    ET.SubElement(bdd, "INDEX").text = "0"

    tree.write(xml_path, encoding="utf-8", xml_declaration=True)
    print(f"üì• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–≤—Ç–æ-—Å–ª–æ–≤–∞—Ä—å: {original} ‚Üí {translated}")